将 Props 传递给无状态函数组件
之前的挑战涵盖了关于在 React 中创建和组合 JSX 元素、函数组件和 ES6 风格的类组件的很多内容。 有了这个基础，现在是时候看看 React 中的另一个常见特性 props 了。 在 React 中，可以将属性传递给子组件。 假设有一个 App 组件，该组件渲染了一个名为 Welcome 的子组件，它是一个无状态函数组件。 可以通过以下方式给 Welcome 传递一个 user 属性：

<App>
  <Welcome user='Mark' />
</App>
可以把创建的 React 支持的自定义 HTML 属性传递给组件。 在上面的例子里，将创建的属性 user 传递给组件 Welcome。 由于 Welcome 是一个无状态函数组件，它可以像这样访问该值：

const Welcome = (props) => <h1>Hello, {props.user}!</h1>
调用 props 这个值是常见做法，当处理无状态函数组件时，基本上可以将其视为返回 JSX 的函数的参数。 这样，你就可以在函数体中访问该值。 但对于类组件，访问方式会略有不同。

代码编辑器中有 Calendar 和 CurrentDate 组件。 从 Calendar 组件渲染 CurrentDate 时，从 JavaScript 的 Date 对象分配当前日期，并将其作为 date 属性传入。 然后访问 CurrentDate 组件的 prop，并在 p 标签中显示其值。 请注意，要将 prop 的值视为 JavaScript，必须将它们括在花括号中，例如date={Date()}。

** start of index.jsx **

const CurrentDate = (props) => {
  return (
    <div>
      <p>The current date is: {props.date}</p>
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        <CurrentDate date={Date()} />
      </div>
    );
  }
};

** end of index.jsx **

