首先，定义 action 的类型 ADD，将其设置为常量 ADD。 接着，定义创建 action 的函数addMessage()，用该函数创建添加消息的 action， 把 message 传给创建 action 的函数并返回包含该消息的 action

接着，创建名为 messageReducer() 的 reducer 方法，为这些消息处理状态。 初始状态应为空数组。 reducer 向状态中的消息数组添加消息，或返回当前状态。 最后，创建 Redux store 并传给 reducer。

** start of index.jsx **

// 定义 ADD、addMessage()、messageReducer() 并在这里存储：
const ADD = "ADD";
const addMessage = message => {
  return {
    type: ADD,
    message
  };
};

// Use ES6 default paramter to give the 'previousState' parameter an initial value.
const messageReducer = (previousState = [], action) => {
  // Use switch statement to lay out the reducer logic in response to different action type
  switch (action.type) {
    case ADD:
      // Use ES6 spread operator to return a new array where the new message is added to previousState
      return [...previousState, action.message];
      break;

    default:
      // A default case to fall back on in case if the update to Redux store is not for this specific state.
      return previousState;
  }
};

const store = Redux.createStore(messageReducer);

** end of index.jsx **

