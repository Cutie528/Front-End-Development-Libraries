创建一个可以控制的输入框
应用程序可能在 state 和渲染的 UI 之间有更复杂的交互。 例如，用于文本输入的表单控件元素（如 input 和 textarea）在用户键入时在 DOM 中维护自己的 state。 通过 React，可以将这种可变 state 转移到 React 组件的 state 中。 用户的输入变成了应用程序 state 的一部分，因此 React 控制该输入字段的值。 通常，如果 React 组件具有用户可以键入的输入字段，那么它将是一个受控的输入表单。

代码编辑器具有一个名为 ControlledInput 的组件框架，用于创建受控的 input 元素。 组件的 state 已经被包含空字符串的 input 属性初始化。 此值表示用户在 input 字段中键入的文本。

首先，创建一个名为 handleChange() 的方法，该方法具有一个名为 event 的参数。 方法被调用时，它接收一个 event 对象，该对象包含一个来自 input 元素的字符串文本。 可以使用方法内的 event.target.value 来访问这个字符串。 用这个新字符串更新组件的state的input属性。

在 render 方法中的 h4 标签之上创建 input 元素。 添加一个 value 属性，使其等于组件 state 的 input 属性。 然后将 onChange() 事件处理程序设置到 handleChange() 方法中。

在输入框中键入时，文本由 handleChange() 方法处理，文本被设置为本地 state 中的 input 属性，并渲染在页面上的 input 框中。 组件 state 是输入数据的唯一真实来源。

最后，不要忘记在构造函数中添加必要的绑定。

** start of index.jsx **

class ControlledInput extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    // 修改这行下面的代码
this.handleChange = this.handleChange.bind(this);
    // 修改这行上面的代码
  }
  // 修改这行下面的代码
handleChange(event){
  this.setState({
   input: event.target.value
  });
}
  // 修改这行上面的代码
  render() {
    return (
      <div>
        { /* 修改这行下面的代码 */}
<input value={this.state.input} onChange={this.handleChange} ></input>
        { /* 修改这行上面的代码 */}
        <h4>Controlled Input:</h4>
        <p>{this.state.input}</p>
      </div>
    );
  }
};

** end of index.jsx **

